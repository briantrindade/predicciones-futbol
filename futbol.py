# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FO6ATosFMlznbEZGJAgF08rMYZu6Vfby
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import requests
# 
# # Reemplaza con tu clave API
# api_key = "2580147fe536ec7ebeefaf9564b5fe85"
# 
# # Endpoint de probabilidades de fútbol
# url = "https://api.the-odds-api.com/v4/sports/soccer_epl/odds/?regions=eu&markets=h2h,totals&apiKey=" + api_key
# 
# # Función para obtener datos de la API
# def obtener_datos():
#     response = requests.get(url)
#     if response.status_code == 200:
#         return response.json()
#     else:
#         st.error("Error al obtener los datos de la API.")
#         return None
# 
# # Título de la aplicación
# st.title("Predicciones de Fútbol")
# 
# # Botón para cargar los datos
# if st.button("Cargar Datos"):
#     datos = obtener_datos()
# 
#     if datos:
#         # Crear un DataFrame a partir de los datos obtenidos
#         df = pd.DataFrame(datos)
# 
#         # Mostrar los datos de los partidos
#         for index, row in df.iterrows():
#             home_team = row['home_team']
#             away_team = row['away_team']
#             bookmakers = row['bookmakers']
# 
#             # Acceder al primer bookmaker (casa de apuestas)
#             if len(bookmakers) > 0:
#                 markets = bookmakers[0]['markets']  # Extraer los mercados de apuestas
# 
#                 # Head-to-head (h2h): equipo 1 gana, empate, equipo 2 gana
#                 if markets[0]['key'] == 'h2h':
#                     outcomes = markets[0]['outcomes']
# 
#                     # Extraemos las probabilidades de ganador, empate y perdedor
#                     cuotas_equipo1 = outcomes[0]['price']  # Cuota del equipo 1
#                     cuotas_empate = outcomes[1]['price']  # Cuota del empate
#                     cuotas_equipo2 = outcomes[2]['price']  # Cuota del equipo 2
# 
#                     # Calcular las probabilidades implícitas
#                     prob_equipo1 = 1 / cuotas_equipo1 * 100
#                     prob_empate = 1 / cuotas_empate * 100
#                     prob_equipo2 = 1 / cuotas_equipo2 * 100
# 
#                     # Mostrar los resultados en la aplicación Streamlit
#                     st.subheader(f"Partido: {home_team} vs {away_team}")
#                     st.write(f"Probabilidad de ganar {home_team}: {prob_equipo1:.2f}%")
#                     st.write(f"Probabilidad de Empate: {prob_empate:.2f}%")
#                     st.write(f"Probabilidad de ganar {away_team}: {prob_equipo2:.2f}%")
# 
#                 # Totales (goles over/under)
#                 if markets[1]['key'] == 'totals':
#                     totals = markets[1]['outcomes']
# 
#                     # Extraemos las probabilidades del over/under de goles
#                     total_goles_over = totals[0]['price']  # Cuota de más de X goles
#                     total_goles_under = totals[1]['price']  # Cuota de menos de X goles
# 
#                     # Mostrar las probabilidades de goles en la aplicación
#                     st.write(f"Probabilidad de que haya más de {totals[0]['name']} goles: {total_goles_over * 100:.2f}%")
#                     st.write(f"Probabilidad de que haya menos de {totals[1]['name']} goles: {total_goles_under * 100:.2f}%")
#             else:
#                 st.write("No hay datos disponibles para los bookmakers.")
#     else:
#         st.write("No hay datos de partidos disponibles.")
#

!streamlit run app.py &

!pip install streamlit

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import requests
# 
# # Reemplaza con tu clave API
# api_key = "2580147fe536ec7ebeefaf9564b5fe85"
# 
# # Endpoint de probabilidades de fútbol
# url = "https://api.the-odds-api.com/v4/sports/soccer_epl/odds/?regions=eu&markets=h2h,totals&apiKey=" + api_key
# 
# # Función para obtener datos de la API
# def obtener_datos():
#     response = requests.get(url)
#     if response.status_code == 200:
#         return response.json()
#     else:
#         st.error("Error al obtener los datos de la API.")
#         return None
# 
# # Título de la aplicación
# st.title("Predicciones de Fútbol")
# 
# # Botón para cargar los datos
# if st.button("Cargar Datos"):
#     datos = obtener_datos()
# 
#     if datos:
#         # Crear un DataFrame a partir de los datos obtenidos
#         df = pd.DataFrame(datos)
# 
#         # Mostrar los datos de los partidos
#         for index, row in df.iterrows():
#             home_team = row['home_team']
#             away_team = row['away_team']
#             bookmakers = row['bookmakers']
# 
#             # Acceder al primer bookmaker (casa de apuestas)
#             if len(bookmakers) > 0:
#                 markets = bookmakers[0]['markets']  # Extraer los mercados de apuestas
# 
#                 # Head-to-head (h2h): equipo 1 gana, empate, equipo 2 gana
#                 if markets[0]['key'] == 'h2h':
#                     outcomes = markets[0]['outcomes']
# 
#                     # Extraemos las probabilidades de ganador, empate y perdedor
#                     cuotas_equipo1 = outcomes[0]['price']  # Cuota del equipo 1
#                     cuotas_empate = outcomes[1]['price']  # Cuota del empate
#                     cuotas_equipo2 = outcomes[2]['price']  # Cuota del equipo 2
# 
#                     # Calcular las probabilidades implícitas
#                     prob_equipo1 = 1 / cuotas_equipo1 * 100
#                     prob_empate = 1 / cuotas_empate * 100
#                     prob_equipo2 = 1 / cuotas_equipo2 * 100
# 
#                     # Mostrar los resultados en la aplicación Streamlit
#                     st.subheader(f"Partido: {home_team} vs {away_team}")
#                     st.write(f"Probabilidad de ganar {home_team}: {prob_equipo1:.2f}%")
#                     st.write(f"Probabilidad de Empate: {prob_empate:.2f}%")
#                     st.write(f"Probabilidad de ganar {away_team}: {prob_equipo2:.2f}%")
# 
#                 # Totales (goles over/under)
#                 if markets[1]['key'] == 'totals':
#                     totals = markets[1]['outcomes']
# 
#                     # Extraemos las probabilidades del over/under de goles
#                     total_goles_over = totals[0]['price']  # Cuota de más de X goles
#                     total_goles_under = totals[1]['price']  # Cuota de menos de X goles
# 
#                     # Mostrar las probabilidades de goles en la aplicación
#                     st.write(f"Probabilidad de que haya más de {totals[0]['name']} goles: {total_goles_over * 100:.2f}%")
#                     st.write(f"Probabilidad de que haya menos de {totals[1]['name']} goles: {total_goles_under * 100:.2f}%")
#             else:
#                 st.write("No hay datos disponibles para los bookmakers.")
#     else:
#         st.write("No hay datos de partidos disponibles.")
#

!streamlit run app.py &

pip install matplotlib

import requests
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt

# Reemplaza con tu clave API
api_key = "2580147fe536ec7ebeefaf9564b5fe85"

# Endpoint de probabilidades de fútbol
url = "https://api.the-odds-api.com/v4/sports/soccer_epl/odds/?regions=eu&markets=h2h,totals&apiKey=" + api_key

# Función para obtener datos de la API
def obtener_datos():
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        st.error("Error al obtener los datos de la API.")
        return None

# Título de la aplicación
st.title("Predicciones de Fútbol")

# Filtrar por partidos (cambia esto a tus partidos reales)
partidos = ["Partido 1", "Partido 2", "Partido 3"]  # Aquí deberías agregar los nombres de los partidos
partido_seleccionado = st.selectbox("Selecciona un partido:", partidos)

# Botón para cargar los datos
if st.button("Cargar Datos"):
    datos = obtener_datos()

    if datos:
        # Filtrar los datos según el partido seleccionado
        df = pd.DataFrame(datos)
        partido_info = df[df['home_team'] + " vs " + df['away_team'] == partido_seleccionado].iloc[0]

        # Mostrar los datos obtenidos del partido seleccionado
        st.write(partido_info[['home_team', 'away_team', 'bookmakers']])

        # Extraer las cuotas
        cuotas_equipo1 = partido_info['bookmakers'][0]['markets'][0]['outcomes'][0]['price']
        cuotas_equipo2 = partido_info['bookmakers'][0]['markets'][0]['outcomes'][1]['price']

        # Calcular las probabilidades
        probabilidad_equipo1 = 1 / cuotas_equipo1 * 100
        probabilidad_equipo2 = 1 / cuotas_equipo2 * 100

        # Graficar las probabilidades
        equipos = [partido_info['home_team'], partido_info['away_team']]
        probabilidades = [probabilidad_equipo1, probabilidad_equipo2]

        # Crear la figura
        fig, ax = plt.subplots()
        ax.bar(equipos, probabilidades, color=['blue', 'red'])
        ax.set_ylabel('Probabilidad (%)')
        ax.set_title(f'Probabilidades para el partido: {partido_seleccionado}')

        # Mostrar la gráfica en Streamlit
        st.pyplot(fig)

import requests
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt

# Reemplaza con tu clave API
api_key = "2580147fe536ec7ebeefaf9564b5fe85"

# Endpoint de probabilidades de fútbol
url = "https://api.the-odds-api.com/v4/sports/soccer_epl/odds/?regions=eu&markets=h2h,totals&apiKey=" + api_key

# Función para obtener datos de la API
def obtener_datos():
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        st.error("Error al obtener los datos de la API.")
        return None

# Título de la aplicación
st.title("Predicciones de Fútbol")

# Botón para cargar los datos
if st.button("Cargar Datos"):
    datos = obtener_datos()

    if datos:
        df = pd.DataFrame(datos)

        # Crear una lista de partidos
        partidos = [f"{row['home_team']} vs {row['away_team']}" for index, row in df.iterrows()]
        partido_seleccionado = st.selectbox("Selecciona un partido:", partidos)

        # Filtrar los datos según el partido seleccionado
        partido_info = df[df['home_team'] + " vs " + df['away_team'] == partido_seleccionado].iloc[0]

        # Mostrar los datos obtenidos del partido seleccionado
        st.write(partido_info[['home_team', 'away_team', 'bookmakers']])

        # Extraer las cuotas
        cuotas_equipo1 = partido_info['bookmakers'][0]['markets'][0]['outcomes'][0]['price']
        cuotas_equipo2 = partido_info['bookmakers'][0]['markets'][0]['outcomes'][1]['price']

        # Calcular las probabilidades
        probabilidad_equipo1 = 1 / cuotas_equipo1 * 100
        probabilidad_equipo2 = 1 / cuotas_equipo2 * 100

        # Graficar las probabilidades
        equipos = [partido_info['home_team'], partido_info['away_team']]
        probabilidades = [probabilidad_equipo1, probabilidad_equipo2]

        # Crear la figura
        fig, ax = plt.subplots()
        ax.bar(equipos, probabilidades, color=['blue', 'red'])
        ax.set_ylabel('Probabilidad (%)')
        ax.set_title(f'Probabilidades para el partido: {partido_seleccionado}')
        st.pyplot(fig)

        # Graficar como gráfico circular
        fig2, ax2 = plt.subplots()
        ax2.pie(probabilidades, labels=equipos, autopct='%1.1f%%', startangle=90)
        ax2.axis('equal')  # Igualar los ejes para que el gráfico sea circular
        st.pyplot(fig2)

